<launch>
  <!-- Vehicle namespace -->
  <arg name="uuv_name"/>
  <!-- Name of the vehicle model -->
  <arg name="model_name" default="$(arg uuv_name)"/>
  <!-- Thruster saturation -->
  <arg name="saturation" default="1200"/>
  <!-- Flag set as true to use load controller the parameters from the file  -->
  <arg name="use_params_file" default="false"/>
  <!-- Flag to start the trajectory visual markers publisher -->
  <arg name="gui_on" default="true"/>
  <!-- If the file is not used, read the parameters from the user input -->
  <!-- Caution: no spaces between the parameter values -->
  <!-- The following controller parameters have been optimized for the RexROV
       vehicle using SMAC (https://github.com/automl/SMAC3)
  -->
  <!-- For the underactuated case, only x, y, z and yaw are controlled -->
  <arg name="Kp" default="10.0,10.0,10.0,10.0"/>
  <arg name="Kd" default="1.0,1.0,1.0,1.0"/>
  <arg name="Ki" default="0.5,0.5,0.5,0.5"/>

  <arg name="controller_config_file" default="$(find uuv_trajectory_control)/config/controllers/ua_pid/$(arg model_name)/params.yaml"/>

  <!--Thruster manager configuration  -->
  <arg name="thruster_manager_output_dir" default="$(find uuv_thruster_manager)/config/$(arg model_name)"/>
  <arg name="thruster_manager_config_file" default="$(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml"/>
  <!-- File containing the thruster allocation matrix -->
  <arg name="tam_file" default="$(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml"/>

  <!-- Start the thruster allocation manager -->
  <include file="$(find uuv_thruster_manager)/launch/thruster_manager.launch">
     <arg name="uuv_name" value="$(arg uuv_name)" />
     <arg name="model_name" value="$(arg model_name)" />
     <arg name="output_dir" value="$(arg thruster_manager_output_dir)" />
     <arg name="config_file" value="$(arg thruster_manager_config_file)" />
     <arg name="tam_file" value="$(arg tam_file)" />
   </include>

  <!-- This node just reads the trajectory and waypoint topics and publishes
       visualization markers for RViz -->
  <group if="$(arg gui_on)">
    <group ns="$(arg uuv_name)">
      <node pkg="uuv_control_utils"
            type="trajectory_marker_publisher.py"
            name="trajectory_marker_publisher"
            output="screen">
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
      </node>
    </group>
  </group>

  <group if="$(arg use_params_file)">
    <group ns="$(arg uuv_name)">
      <node pkg="uuv_trajectory_control"
            type="rov_ua_pid_controller.py"
            name="rov_ua_pid_controller"
            output="screen">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
        <rosparam file="$(arg controller_config_file)" command="load"/>
      </node>
    </group>
  </group>

  <group unless="$(arg use_params_file)">
    <group ns="$(arg uuv_name)">
      <node pkg="uuv_trajectory_control"
            type="rov_ua_pid_controller.py"
            name="rov_ua_pid_controller"
            output="screen">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
        <!-- Controller parameters -->
        <rosparam subst_value="true">
          saturation: $(arg saturation)
          Kp: [$(arg Kp)]
          Kd: [$(arg Kd)]
          Ki: [$(arg Ki)]
        </rosparam>
      </node>
    </group>
  </group>
</launch>
