<launch>
  <arg name="model_name" />
  <arg name="uuv_name" default="$(arg model_name)"/>
  <arg name="base_link" default="base_link" />
  <arg name="timeout" default="-1" />
  <arg name="reset_tam" default="false"/>
  <arg name="output_dir" default="$(find uuv_thruster_manager)/config/$(arg model_name)"/>
  <arg name="config_file" default="$(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml"/>
  <arg name="tam_file" default="$(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml"/>

  <group ns="$(arg uuv_name)">
    <rosparam file="$(arg config_file)" command="load"/>

    <rosparam param="thruster_manager/tf_prefix" subst_value="true">
      $(arg uuv_name)
    </rosparam>

    <rosparam param="thruster_manager/timeout" subst_value="true">
      $(arg timeout)
    </rosparam>

    <group if="$(arg reset_tam)">
      <node pkg="uuv_thruster_manager"
            type="thruster_allocator.py"
            name="thruster_allocator"
            output="screen">
        <!-- Output directory to store the thruster allocation matrix -->
        <rosparam param="output_dir" subst_value="true">
          $(arg output_dir)
        </rosparam>
      </node>
    </group>

    <group unless="$(arg reset_tam)">
      <node pkg="uuv_thruster_manager"
            type="thruster_allocator.py"
            name="thruster_allocator"
            output="screen">
        <!-- Load thruster allocation matrix -->
        <rosparam file="$(arg tam_file)" command="load"/>
      </node>
    </group>
  </group>

</launch>
